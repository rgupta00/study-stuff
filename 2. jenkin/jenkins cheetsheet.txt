jenkins tutorial:
-----------------
run jenkins jar, changing port
-----------------------------
java -jar jenkins.war --httpPort=8090

1. login
2. install plugins
3. change admin password




https://www.blazemeter.com/blog/how-to-install-jenkins-with-a-war-file



hello world jenkins job:
-------------------------
	login --> create first job-->


public class Hello{
	public static void main(String args[]){
		System.out.println("hello to jenkins");
	}
}


cd /home/raj/hello2
javac Hello.java
java Hello



spring mvc maven github project :
------------------------------
step 1: create spring mvc maven hello world
step 2: put project on github

step 3: create an new jenkins project

springmvc ----->freestyle ---> give description
				(spring MVC hello world)

					|
				choose : github project ..provide link


				choose : SCM--> git
				provide Credentials ( create jenkins/admin)

					|
				Build trigger --> poll scm: * * * * *

					|
				Build Environment: Delete workspace before build starts

					|

				Choose build goals: clean compile test package




Tomcat Server Setup For Jenkins Deployment :
--------------------------------------------

step 1: donwload install tomcat zip
step 2: provide new user in tomcat-user.xml

<role rolename="manager-gui"/>
<role rolename="manager-script"/>
<user username="admin" password="admin" roles="manager-gui"/>


step 3: now we need to add tomcat plugin for jenkins

	click Manage Jenkins---> manage plugins--->search for  container

								|
							Deploy to container
								|
						Installing Plugins/Upgrades
	Now restart jenkins



step 4: now from previous project

choose last option:

Post-build Actions

	mention war file location: target/SpringFormApp.war

	configure  Credentials	

	admin/****** (tomcat.admin)
 
 	and tomcat url



Jenkins pipeline:
----------------

	step 1:
	install build pipeline plugin


	click Manage Jenkins---> manage plugins--->search for  Build Pipeline

								|
						Installing Plugins/Upgrades
	Now restart jenkins



	step 2: create new project : qa-job

	project Build Triggers
	Trigger builds remotely (e.g., from scripts)	
	Build after other projects are built	
 		Projects to watch: dev-job
		Trigger only if build is stable




jenkins declerative pipeline:
---------------------------
	demo-pipeline--> declarative pipeline

	Hello world Jenkins Declarative Pipeline:

	pipeline {
    agent any

    stages {
        stage('Hello') {
            steps {
                echo 'Hello World'
            }
        }
    }
}


Example 2: pipeline hello world with git:
-------------------------------------



pipeline {
    agent any

    stages {
        stage('Git checkout') {
            steps {
                git 'https://github.com/demo/SpringFormApp'
            }
        }
    }
}

	
