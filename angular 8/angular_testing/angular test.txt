
Anugular testing:
---------------

Introduction
What is karma and jasmin?
How Karma & Jasmine  are configured with Angular?
What is the role of Karma.conf.js?
What is the role of test.ts?




step 1: create hello world angular using cli

step 2: hello world contain app.component.spec.ts
 spec file code is created whenever we are created new component, pipe, services etc

 run: ng test
	run karma jasmin test cases

 http://localhost:9876/?id=16030314

 how to configure test env?
 ------------------------
	=> when we create angular app, package.json contain dev-depenencies
	in these dev dependencies we also have dependencies of karma and jasmine

     package.json
     ----------

    "@types/jasmine": "~3.3.8",
    "@types/jasminewd2": "~2.0.3",
    "codelyzer": "^5.0.0",
    "jasmine-core": "~3.4.0",
    "jasmine-spec-reporter": "~4.2.1",
    "karma": "~4.1.0",
    "karma-chrome-launcher": "~2.2.0",
    "karma-coverage-istanbul-reporter": "~2.0.1",
    "karma-jasmine": "~2.0.1",
    "karma-jasmine-html-reporter": "^1.4.0",


    angular.json
    -----------

    "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "main": "src/test.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.spec.json",
            "karmaConfig": "karma.conf.js",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],

	=> main act as entry for karma config (karma.config.js), default configuration for karma framework


Hello world test:
----------------


cal.ts
------
export function cal(num1: number, num2: number){
    return num1+num2;
}

cal.spec.ts
----------
import { cal } from "./cal"

describe('cal test',()=>{
    //it define test suite
    it('testing add function', ()=>{
       expect( cal(2,2)).toBe(4);
    })
})

run the test case....


testing string and arrarys:
-------------------------
1.Test Strings using matchers:
    toBe, toEqual, toContain, toMatch
2. Difference between toBe & toEqual
3. Test Arrays using matchers:
     toEqual, toContain


Ex:
describe('string matcher test', ()=>{

   it('testing string,"toBe" for matcher ===', ()=>{
    let firstStr='india';
    expect(firstStr).toBe('india');
   });


   it('testing string,"toEqual" for matcher ==', ()=>{
    let firstStr='india';
    expect(firstStr).toEqual('india');
   })

   it('testing string,"toContain" check hello present in the string', ()=>{
    let firstStr='india is my country';
    expect(firstStr).toContain('my');
   })

   it('testing string,"toMatch" matcher for regular expression', ()=>{
    let firstStr='This 4th lane of Underworld';
    expect(firstStr).toMatch(/\d+/);
    expect(firstStr).toMatch("Underworld");

   })

});


how to exclude an test case?
-------------------

Write x before describe

xdescribe{
}

=> it will remove all test cases from execution




 //testing negative

   it('testing string,"not.toEqual" for matcher ==', ()=>{
    let firstStr='india';
    expect(firstStr).not.toEqual('india 2');
   })


 it('testing string,"toBe" for matcher ===', ()=>{
    let firstStr='india';
    expect(firstStr).not.toBe('india 2');
   });


Difference between toBe & toEqual:
-----------------------------
	toEquals must be used to compare object and array, do deep comparision
 Ex:
    it('toBe vs equals', ()=>{

        let a={val: 10};
        let b={val: 10};

       // expect(a).toBe(b);
       expect(a).toEqual(b);
       });




 Example array:
------------------

 it('array test', ()=>{
        let a=[1,2,3];
        let b=[1,2,3];
       expect(a).toEqual(b);
       });
    

       it('toContain in array of string ', ()=>{
        let a=["i","love","js"];
        
       expect(a).toContain('love');
       });



Understanding setup and tear-down, beforeEach and afterEach
-----------------------------

custreg.ts
--------
export class CustomerReg{
    hotelCap= 30;
    custCount=10;

    regCustomer(){
        return ++this.custCount;
    }
    unRegCustomer(){
        return --this.custCount;
    }
}



custreg.spec.ts
----------

import { CustomerReg } from "./custreg"

describe('cust reg',()=>{

    it('reg customer count should increse by one',()=>{
        let custService=new CustomerReg();
        let custCount=custService.regCustomer();
        expect(custCount).toEqual(11);
    })

    it('un reg customer count should dec by one',()=>{
        let custService=new CustomerReg();
        let custCount=custService.unRegCustomer();
        expect(custCount).toEqual(9);
    })
})

What if we create common custService object?
---------------------------------------

import { CustomerReg } from "./custreg"

describe('cust reg',()=>{
    let custService=new CustomerReg();
    it('reg customer count should increse by one',()=>{
        
        let custCount=custService.regCustomer();
        expect(custCount).toEqual(11);
    })

    it('un reg customer count should dec by one',()=>{
        let custCount=custService.unRegCustomer();
        expect(custCount).toEqual(9);
    })
})

one test pass one fail
-------------------------
 beforeEach and afterEach
------------------------

import { CustomerReg } from "./custreg"

describe('cust reg',()=>{

    let custService:CustomerReg;

    beforeEach(()=>{
        let custService=new CustomerReg();
    });
    afterEach(()=>{
        custService=null;
    });
    beforeAll(()=>{
        console.log(`run before any test cases...`);
    });

    afterAll(()=>{
        console.log(`run before after all test cases runs...`);
    });

    it('reg customer count should increse by one',()=>{
        
        let custCount=custService.regCustomer();
        expect(custCount).toEqual(11);
    })

    it('un reg customer count should dec by one',()=>{
        let custCount=custService.unRegCustomer();
        expect(custCount).toEqual(9);
    })
})




