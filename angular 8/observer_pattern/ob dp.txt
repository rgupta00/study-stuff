
Observer design pattern:
========================

	
	=> The concept behind the Observer design pattern is the basis 
		for PubSub, event and non blocking based systems
	
	=> It supports the principle of loose coupling between objects that 
	interact with each other.

	=>  It allows sending data to other objects effectively without any change in the Subject
	 or Observer classes. Observers can be added/removed at any point in time

	Jdk support for observer design pattern:
	----------------------------------------

		//observable (news paper wala)
		
	stock market : HCL, IBM



class MySubject extends Observable{
	
	private double stockPrice;
	private String stockName;
	public MySubject(double stockPrice, String stockName) {
		super();
		this.stockPrice = stockPrice;
		this.stockName = stockName;
	}
	public double getStockPrice() {
		return stockPrice;
	}
	public void setStockPrice(double stockPrice) {
		this.stockPrice = stockPrice;
		//
		this.setChanged();
		this.notifyObservers(new Double(stockPrice));
	}
	public String getStockName() {
		return stockName;
	}
	public void setStockName(String stockName) {
		this.stockName = stockName;
	}
}

class Client implements Observer{

	@Override
	public void update(Observable o, Object a) {
		System.out.println("price changed...."+ a );
	}
	
}



public class Demo {
	
	public static void main(String[] args) {
		MySubject mySubject=new MySubject(300, "Goo");
		Client c1=new Client();
		mySubject.addObserver(c1);
		
		mySubject.setStockPrice(340);
	}

}


